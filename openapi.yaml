openapi: 3.0.0
info:
  title: Task Manager API
  description: A simple Task Manager REST API built with SlimPHP and PostgreSQL
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
    description: Local development server
paths:
  /tasks:
    get:
      summary: List all tasks
      description: Returns a paginated list of all tasks
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
      security:
        - ApiKeyAuth: []
      responses:
        '200':
          description: A paginated list of tasks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTaskList'
    post:
      summary: Create a new task
      description: Creates a new task with the provided data
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/tasks/{id}':
    get:
      summary: Get a task by ID
      description: Returns a single task by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: A single task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a task
      description: Updates a task with the provided data
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      summary: Delete a task
      description: Deletes a task by ID
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id
          in: path
          description: Task ID
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
        '404':
          description: Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Buy groceries
        description:
          type: string
          nullable: true
          example: 'Milk, Bread, Eggs'
        completed:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: 2025-03-24T14:00:00.000Z
    TaskInput:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 3
          example: Buy groceries
        description:
          type: string
          nullable: true
          example: 'Milk, Bread, Eggs'
        completed:
          type: boolean
          default: false
          example: false
    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          example: Buy groceries
        description:
          type: string
          nullable: true
          example: 'Milk, Bread, Eggs'
        completed:
          type: boolean
          example: true
    PaginatedTaskList:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Task'
        meta:
          type: object
          properties:
            pagination:
              type: object
              properties:
                total:
                  type: integer
                  example: 10
                per_page:
                  type: integer
                  example: 10
                current_page:
                  type: integer
                  example: 1
                total_pages:
                  type: integer
                  example: 1
    Error:
      type: object
      properties:
        error:
          type: string
          example: Resource not found
        message:
          type: string
          example: The task you requested does not exist.